{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.jpg","path":"img/favicon.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/qrcode.jpg","path":"img/qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"source/about/index.md","hash":"944512e9cec05da10d2a092d5c6fb11a461cb90d","modified":1637899223693},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632303131000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1632303131000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1632303131000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1632303131000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1632303131000},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1632303131000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1632303131000},{"_id":"themes/fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1632303131000},{"_id":"themes/fluid/_config.yml","hash":"567f551a3709b82b76a30b8ce560a5c8ffb20250","modified":1637908515709},{"_id":"themes/fluid/package.json","hash":"18f04247801549fe78600c1ee9c601fcbea4cab3","modified":1632303131000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1632303131000},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1632303131000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1632303131000},{"_id":"themes/fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1632303131000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1632303131000},{"_id":"themes/fluid/layout/index.ejs","hash":"666476260a2cead2cc2928d51977c4a7ba8de6bb","modified":1632303131000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1632303131000},{"_id":"themes/fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1632303131000},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1632303131000},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1632303131000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1632303131000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1632303131000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1632303131000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1632303131000},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1632303131000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1632303131000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1632303131000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1632303131000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"7d0cf31f2595cfe6d5ad31d569654f21a00dfd77","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1632303131000},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1632303131000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1632303131000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1632303131000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1632303131000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"8e33f915028ac56258f6999d19b1ad8d800cecfe","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1632303131000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1632303131000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1632303131000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1632303131000},{"_id":"themes/fluid/source/img/avatar.jpg","hash":"73079840264d8d7bb28e0f051836b0baf470b886","modified":1637906376665},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1632303131000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1632303131000},{"_id":"themes/fluid/source/img/favicon.jpg","hash":"73079840264d8d7bb28e0f051836b0baf470b886","modified":1637906376665},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1632303131000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1632303131000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1632303131000},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1632303131000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1632303131000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1632303131000},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1632303131000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":1632303131000},{"_id":"themes/fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1632303131000},{"_id":"themes/fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1632303131000},{"_id":"themes/fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1632303131000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"a7ed1d3079c32497c8955ca75f5fb6992e5ffb8b","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ece659572cf4e12638a1607fca512c25098bbd82","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1632303131000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1632303131000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1632303131000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"63aedd67d90d641cc672540db20ef615f528c9f1","modified":1632303131000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd55a2dce6b9d3e165a0a26d0b5bf7f649006bcd","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"c66e0da2c0d05e76a686a77ab4e74f0d2e89777d","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1632303131000},{"_id":"themes/fluid/source/img/qrcode.jpg","hash":"3682ef14ca6d337071762a1c70e6df60290e1f35","modified":1637908453401},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1632303131000},{"_id":"public/local-search.xml","hash":"723c7b94481a25d5184ac8e69d6dde021ba84661","modified":1638166111132},{"_id":"public/index.html","hash":"92a28867909cb86bbfc3bf6ecbbcad54defb257c","modified":1638166111132},{"_id":"public/2021/11/26/hello-world/index.html","hash":"e464e3c6a09e2f6ffc5ac2961ed4bad30645efbc","modified":1637915665373},{"_id":"public/about/index.html","hash":"e7a116b97b6ff4515d1a94bf4e32557103dfa25d","modified":1637908655149},{"_id":"public/archives/index.html","hash":"03efca8e32471cc8b585ce1f503c57d337febe82","modified":1638166111132},{"_id":"public/404.html","hash":"5871e980c7c443a42d3cb1740f6f92b905d33d1d","modified":1637908655149},{"_id":"public/archives/2021/11/index.html","hash":"97429ddaadbd51173dd5a9f0e3428136cc94b93e","modified":1638166111132},{"_id":"public/archives/2021/index.html","hash":"448a554bc4fd635731bcde1f7a21745ac515bb56","modified":1638166111132},{"_id":"public/tags/index.html","hash":"914091cd4041b3e7c35f7ffd4d547165a437f5f7","modified":1638166111132},{"_id":"public/links/index.html","hash":"0e2e58f354c0c74570042680a0322fc519d3a8fb","modified":1637908655149},{"_id":"public/categories/index.html","hash":"e4902541d0903fbe1077b7c8b1e0087b823c7933","modified":1637908655149},{"_id":"public/img/avatar.jpg","hash":"73079840264d8d7bb28e0f051836b0baf470b886","modified":1637908655149},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1637908655149},{"_id":"public/img/favicon.jpg","hash":"73079840264d8d7bb28e0f051836b0baf470b886","modified":1637908655149},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1637908655149},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1637908655149},{"_id":"public/img/qrcode.jpg","hash":"3682ef14ca6d337071762a1c70e6df60290e1f35","modified":1637908655149},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1637908655149},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1637908655149},{"_id":"public/css/main.css","hash":"80b7c3dc3f47db8b700b4437bdf45706fe504f66","modified":1637908655149},{"_id":"public/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1637908655149},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1637908655149},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1637908655149},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1637908655149},{"_id":"public/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":1637908655149},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1637908655149},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1637908655149},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1637908655149},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1637908655149},{"_id":"source/_posts/stacking-context.md","hash":"8af77f2d2593dd86c61ba6d79932f4146e5394fb","modified":1637915626428},{"_id":"public/tags/css/index.html","hash":"fa1f4796e06316aadb264a56567ac22eadfc67bd","modified":1637915665373},{"_id":"public/2021/11/26/stacking-context/index.html","hash":"e23b127400ec086740d0be38693b942c4f256354","modified":1638166111132},{"_id":"source/_posts/aboutHttp.md","hash":"d2a18fa9e64fb701c7d1bcaef8e29b05f7c54c80","modified":1638166089837},{"_id":"public/tags/网络协议/index.html","hash":"baee56ed4b08601df88b7a77452bd1db1776b0df","modified":1638166111132},{"_id":"public/2021/11/29/aboutHttp/index.html","hash":"46e5b14beea7a96517b7a818130e43d184ce30fa","modified":1638166111132}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-02-23T11:20:33.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n","updated":"2021-11-26T04:00:23.693Z","path":"about/index.html","comments":1,"_id":"ckwg0iv0w000070uy66grbrrx","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-11-26T02:58:09.074Z","updated":"1985-10-26T08:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwg0iv10000170uy67yf5td4","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":367,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"CSS中的层叠上下文和层叠顺序","date":"2021-11-26T07:08:58.000Z","_content":"\n## 层叠上下文\n### 一、什么是层叠上下文\n层叠上下文，英文称作”stacking context”. 是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。\n\n这里出现了一个名词-z轴，指的是什么呢？\n\n表示的是用户与屏幕的这条看不见的垂直线。\n\n层叠上下文是一个概念，跟「块状格式化上下文(BFC)」类似。然而，概念这个东西是比较虚比较抽象的，要想轻松理解，我们需要将其具象化。\n\n怎么个具象化法呢？\n\n你可以把「层叠上下文」理解为当官：网页中有很多很多的元素，我们可以看成是真实世界的芸芸众生。真实世界里，我们大多数人是普通老百姓们，还有一部分人是做官的官员。OK，这里的“官员”就可以理解为网页中的层叠上下文元素。\n\n换句话说，页面中的元素有了层叠上下文，就好比我们普通老百姓当了官，一旦当了官，相比普通老百姓而言，离皇帝更近了，对不对，就等同于网页中元素级别更高，离我们用户更近了。\n\n### 二、什么是层叠水平\n再来说说层叠水平。“层叠水平”英文称作”stacking level”，决定了同一个层叠上下文中元素在z轴上的显示顺序。level这个词很容易让我们联想到我们真正世界中的三六九等、论资排辈。真实世界中，每个人都是独立的个体，包括同卵双胞胎，有差异就有区分。例如，双胞胎虽然长得像Ctrl+C/Ctrl+V得到的，但实际上，出生时间还是有先后顺序的，先出生的那个就大，大哥或大姐。网页中的元素也是如此，页面中的每个元素都是独立的个体，他们一定是会有一个类似的排名排序的情况存在。而这个排名排序、论资排辈就是我们这里所说的“层叠水平”。层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类；对于普通元素，这个嘛……你自己随意理解。\n\n于是，显而易见，所有的元素都有层叠水平，包括层叠上下文元素，层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类。然后，对于普通元素的层叠水平，我们的探讨仅仅局限在当前层叠上下文元素中。为什么呢？因为否则没有意义。\n\n这么理解吧~ 上面提过元素具有层叠上下文好比当官，大家都知道的，这当官的家里都有丫鬟啊保镖啊管家啊什么的。所谓打狗看主人，A官员家里的管家和B官员家里的管家做PK实际上是没有意义的，因为他们牛不牛逼完全由他们的主子决定的。一人得道鸡犬升天，你说这和珅家里的管家和七侠镇娄知县县令家里的管家有可比性吗？李总理的秘书是不是分分钟灭了你村支部书记的秘书（如果有）。\n\n翻译成术语就是：普通元素的层叠水平优先由层叠上下文决定，因此，层叠水平的比较只有在当前层叠上下文元素中才有意义。\n\n需要注意的是，诸位千万不要把层叠水平和CSS的z-index属性混为一谈。没错，某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的孩子元素；而层叠水平所有的元素都存在。\n\n### 三、什么是层叠顺序\n再来说说层叠顺序。“层叠顺序”英文称作”stacking order”. 表示元素发生层叠时候有着特定的垂直显示顺序，注意，这里跟上面两个不一样，上面的层叠上下文和层叠水平是概念，而这里的层叠顺序是规则。\n\n在CSS2.1的年代，在CSS3还没有出现的时候（注意这里的前提），层叠顺序规则遵循下面这张图：\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/bdb573ccb36a3195.png)\n有人可能有见过类似图，那个图是很多很多年前老外绘制的，英文内容。而是更关键的是国内估计没有同行进行过验证与实践，实际上很多关键信息缺失。\n\n缺失的关键信息包括：\n1. 第一项 位于最低水平的 <kbd>border/background</kbd>指的是层叠上下文元素的边框和背景色。每一个层叠顺序规则适用于一个完整的层叠上下文元素。\n2. 原图没有呈现inline-block的层叠顺序，实际上，inline-block和inline水平元素是同等level级别。\n3. z-index:0实际上和z-index:auto单纯从层叠水平上看，是可以看成是一样的。注意这里的措辞——“单纯从层叠水平上看”，实际上，两者在层叠上下文领域有着根本性的差异。\n下面我要向大家发问了，大家有没有想过，为什么内联元素的层叠顺序要比浮动元素和块状元素都高？\n\n为什么呢？我明明感觉浮动元素和块状元素要更屌一点啊。\n\n嘿嘿嘿，我就不卖关子了，直接看下图的标注说明：\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/c2e53ebce4211353.png)\n\n诸如border/background一般为装饰属性，而浮动和块状元素一般用作布局，而内联元素都是内容。网页中最重要的是什么？当然是内容了哈，对不对！\n\n因此，一定要让内容的层叠顺序相当高，当发生层叠是很好，重要的文字啊图片内容可以优先暴露在屏幕上。\n\n### 四、务必牢记的层叠准则\n下面这两个是层叠领域的黄金准则。当元素发生层叠的时候，其覆盖关系遵循下面2个准则：\n1. <b>谁大谁上：</b> 当具有明显的层叠水平标示的时候，如识别的z-indx值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。通俗讲就是官大的压死官小的。\n2. <b>后来居上：</b>当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。\n\n在CSS和HTML领域，只要元素发生了重叠，都离不开上面这两个黄金准则。因为后面会有多个实例说明，这里就到此为止。\n\n### 五、层叠上下文的特性\n层叠上下文元素有如下特性：\n* 层叠上下文的层叠水平要比普通元素高\n* 层叠上下文可以阻断元素的混合模式\n* 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。\n* 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。\n* 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。\n\n### 六、层叠上下文的创建\n卖了这么多文字，到底层叠上下文是个什么鬼，倒是拿出来瞅瞅啊！\n\n哈哈。如同块状格式化上下文，层叠上下文也基本上是有一些特定的CSS属性创建的。我将其总结为3个流派，也就是做官的3种途径：\n1. 皇亲国戚派：页面根元素天生具有层叠上下文，称之为“根层叠上下文”。\n2. 科考入选派：z-index值为数值的定位元素的传统层叠上下文。\n3. 其他当官途径：其他CSS3属性。\n\n#### 1. 根层叠上下文\n\n指的是页面根元素，也就是滚动条的默认的始作俑者`<html>`元素。这就是为什么，绝对定位元素在`left/top`等值定位的时候，如果没有其他定位元素限制，会相对浏览器窗口定位的原因。\n\n#### 2. 定位元素与传统层叠上下文\n\n对于包含有`position:relative/position:absolute`的定位元素，以及FireFox/IE浏览器（不包括Chrome等webkit内核浏览器）（目前，也就是2016年初是这样）下含有`position:fixed`声明的定位元素，当其`z-index`值不是`auto`的时候，会创建层叠上下文。\n```\n<div style=\"position:relative; z-index:auto;\">\n    <img src=\"mm1.jpg\" style=\"position:absolute; z-index:2;\">    <-- 横妹子 -->\n</div>\n<div style=\"position:relative; z-index:auto;\">\n    <img src=\"mm2.jpg\" style=\"position:relative; z-index:1;\">    <-- 竖妹子 -->\n</div>\n```\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/cd1fe1668945295e.png)\n\n大家会发现，竖着的妹子(mm2)被横着的妹子(mm1)给覆盖了。\n\n下面，我们对父级简单调整下，把z-index:auto改成层叠水平一致的z-index:0, 代码如下：\n\n```\n<div style=\"position:relative; z-index:0;\">\n    <img src=\"mm1.jpg\" style=\"position:absolute; z-index:2;\">    <-- 横妹子 -->\n</div>\n<div style=\"position:relative; z-index:0;\">\n    <img src=\"mm2.jpg\" style=\"position:relative; z-index:1;\">    <-- 竖妹子 -->\n</div>\n```\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/212b18d02d746cc4.png)\n\n\n为什么小小的改变会有想法的结果呢？\n\n差别就在于，`z-index:0`所在的`<div>`元素是层叠上下文元素，而`z-index:auto`所在的`<div>`元素是一个普通的元素，于是，里面的两个`<img>`妹子的层叠比较就不受父级的影响，两者直接套用层叠黄金准则，这里，两者有着明显不一的`z-index`值，因此，遵循<b>“谁大谁上”</b>的准则，于是，`z-index`为`2`的那个横妹子，就趴在了`z-index`为`1`的竖妹子身上。\n\n而`z-index`一旦变成数值，哪怕是`0`，都会创建一个层叠上下文。此时，层叠规则就发生了变化。层叠上下文的特性里面最后一条——自成体系。两个`<img>`妹子的层叠顺序比较变成了优先比较其父级层叠上下文元素的层叠顺序。这里，由于两者都是`z-index:0`，层叠顺序这一块两者一样大，此时，遵循层叠黄金准则的另外一个准则<b>“后来居上”</b>，根据在DOM流中的位置决定谁在上面，于是，位于后面的竖着的妹子就自然而然趴在了横着的妹子身上。对，没错，`<img>`元素上的`z-index`打酱油了！\n\n有时候，我们在网页重构的时候，会发现，`z-index`嵌套错乱，看看是不是受父级的层叠上下文元素干扰了。然后，可能没多大意义了，但我还是提一下，算是祭奠下，IE6/IE7浏览器有个bug，就是`z-index:auto`的定位元素也会创建层叠上下文。这就是为什么在过去，IE6/IE7的`z-index`会搞死人的原因。\n\n然后，我再提一下`position:fixed`, 在过去，`position:fixed`和`relative/absolute`在层叠上下文这一块是一路货色，都是需要`z-index`为数值才行。但是，不知道什么时候起，Chrome等webkit内核浏览器，`position:fixed`元素天然层叠上下文元素，无需`z-index`为数值。根据我的测试，目前，IE以及FireFox仍是老套路。\n\n#### 3. CSS3与新时代的层叠上下文\nCSS3的出现除了带来了新属性，同时还对过去的很多规则发出了挑战。例如，CSS3 `transform`对`overflow`隐藏对`position:fixed`定位的影响等。而这里，层叠上下文这一块的影响要更加广泛与显著。\n\n如下：\n1. `z-index`值不为`auto`的`flex`项(父元素`display:flex|inline-flex`).\n2. 元素的`opacity`值不是`1`.\n3. 元素的`transform`值不是`none`.\n4. 元素`mix-blend-mode`值不是`normal`.\n5. 元素的`filter`值不是`none`.\n6. 元素的`isolation`值是`isolate`.\n7. `will-change`指定的属性值为上面任意一个。\n8. 元素的`-webkit-overflow-scrolling`设为`touch`.\n\n### 七、结束语\n\n只要元素发生层叠，要解释其表现，基本上就本文的这些内容了。\n\n我发现很多重构小伙伴都有`z-index`滥用，或者使用不规范的问题。我觉得最主要的原因还是对理解层叠上下文以及层叠顺序这些概念都不了解。例如，只要使用了定位元素，尤其`absolute`绝对定位，都离不开设置一个`z-index`值；或者只要元素被其他元素覆盖了，例如变成定位元素或者增加`z-index`值升级。页面一复杂，必然搞得乱七八糟。\n\n实际上，在我看来，觉得多数常见，`z-index`根本就没有出现的必要。知道了内联元素的层叠水平比块状元素高，于是，某条线你想覆盖上去的时候，需要设置`position:relative`吗？不需要，`inline-block`化就可以。因为IE6/IE7 `position:relative`会创建层叠上下文，很烦的。\n\nOK，本文已经够长了，就不多啰嗦了。\n\n行为匆忙，出错在所难免，欢迎大力指正。也欢迎各种形式的交流，或者指出文中概念性的错误。\n\n感谢阅读！\n\n[参考地址](https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/)","source":"_posts/stacking-context.md","raw":"---\ntitle: CSS中的层叠上下文和层叠顺序\ndate: 2021-11-26 15:08:58\ntags: css\n---\n\n## 层叠上下文\n### 一、什么是层叠上下文\n层叠上下文，英文称作”stacking context”. 是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。\n\n这里出现了一个名词-z轴，指的是什么呢？\n\n表示的是用户与屏幕的这条看不见的垂直线。\n\n层叠上下文是一个概念，跟「块状格式化上下文(BFC)」类似。然而，概念这个东西是比较虚比较抽象的，要想轻松理解，我们需要将其具象化。\n\n怎么个具象化法呢？\n\n你可以把「层叠上下文」理解为当官：网页中有很多很多的元素，我们可以看成是真实世界的芸芸众生。真实世界里，我们大多数人是普通老百姓们，还有一部分人是做官的官员。OK，这里的“官员”就可以理解为网页中的层叠上下文元素。\n\n换句话说，页面中的元素有了层叠上下文，就好比我们普通老百姓当了官，一旦当了官，相比普通老百姓而言，离皇帝更近了，对不对，就等同于网页中元素级别更高，离我们用户更近了。\n\n### 二、什么是层叠水平\n再来说说层叠水平。“层叠水平”英文称作”stacking level”，决定了同一个层叠上下文中元素在z轴上的显示顺序。level这个词很容易让我们联想到我们真正世界中的三六九等、论资排辈。真实世界中，每个人都是独立的个体，包括同卵双胞胎，有差异就有区分。例如，双胞胎虽然长得像Ctrl+C/Ctrl+V得到的，但实际上，出生时间还是有先后顺序的，先出生的那个就大，大哥或大姐。网页中的元素也是如此，页面中的每个元素都是独立的个体，他们一定是会有一个类似的排名排序的情况存在。而这个排名排序、论资排辈就是我们这里所说的“层叠水平”。层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类；对于普通元素，这个嘛……你自己随意理解。\n\n于是，显而易见，所有的元素都有层叠水平，包括层叠上下文元素，层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类。然后，对于普通元素的层叠水平，我们的探讨仅仅局限在当前层叠上下文元素中。为什么呢？因为否则没有意义。\n\n这么理解吧~ 上面提过元素具有层叠上下文好比当官，大家都知道的，这当官的家里都有丫鬟啊保镖啊管家啊什么的。所谓打狗看主人，A官员家里的管家和B官员家里的管家做PK实际上是没有意义的，因为他们牛不牛逼完全由他们的主子决定的。一人得道鸡犬升天，你说这和珅家里的管家和七侠镇娄知县县令家里的管家有可比性吗？李总理的秘书是不是分分钟灭了你村支部书记的秘书（如果有）。\n\n翻译成术语就是：普通元素的层叠水平优先由层叠上下文决定，因此，层叠水平的比较只有在当前层叠上下文元素中才有意义。\n\n需要注意的是，诸位千万不要把层叠水平和CSS的z-index属性混为一谈。没错，某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的孩子元素；而层叠水平所有的元素都存在。\n\n### 三、什么是层叠顺序\n再来说说层叠顺序。“层叠顺序”英文称作”stacking order”. 表示元素发生层叠时候有着特定的垂直显示顺序，注意，这里跟上面两个不一样，上面的层叠上下文和层叠水平是概念，而这里的层叠顺序是规则。\n\n在CSS2.1的年代，在CSS3还没有出现的时候（注意这里的前提），层叠顺序规则遵循下面这张图：\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/bdb573ccb36a3195.png)\n有人可能有见过类似图，那个图是很多很多年前老外绘制的，英文内容。而是更关键的是国内估计没有同行进行过验证与实践，实际上很多关键信息缺失。\n\n缺失的关键信息包括：\n1. 第一项 位于最低水平的 <kbd>border/background</kbd>指的是层叠上下文元素的边框和背景色。每一个层叠顺序规则适用于一个完整的层叠上下文元素。\n2. 原图没有呈现inline-block的层叠顺序，实际上，inline-block和inline水平元素是同等level级别。\n3. z-index:0实际上和z-index:auto单纯从层叠水平上看，是可以看成是一样的。注意这里的措辞——“单纯从层叠水平上看”，实际上，两者在层叠上下文领域有着根本性的差异。\n下面我要向大家发问了，大家有没有想过，为什么内联元素的层叠顺序要比浮动元素和块状元素都高？\n\n为什么呢？我明明感觉浮动元素和块状元素要更屌一点啊。\n\n嘿嘿嘿，我就不卖关子了，直接看下图的标注说明：\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/c2e53ebce4211353.png)\n\n诸如border/background一般为装饰属性，而浮动和块状元素一般用作布局，而内联元素都是内容。网页中最重要的是什么？当然是内容了哈，对不对！\n\n因此，一定要让内容的层叠顺序相当高，当发生层叠是很好，重要的文字啊图片内容可以优先暴露在屏幕上。\n\n### 四、务必牢记的层叠准则\n下面这两个是层叠领域的黄金准则。当元素发生层叠的时候，其覆盖关系遵循下面2个准则：\n1. <b>谁大谁上：</b> 当具有明显的层叠水平标示的时候，如识别的z-indx值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。通俗讲就是官大的压死官小的。\n2. <b>后来居上：</b>当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。\n\n在CSS和HTML领域，只要元素发生了重叠，都离不开上面这两个黄金准则。因为后面会有多个实例说明，这里就到此为止。\n\n### 五、层叠上下文的特性\n层叠上下文元素有如下特性：\n* 层叠上下文的层叠水平要比普通元素高\n* 层叠上下文可以阻断元素的混合模式\n* 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。\n* 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。\n* 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。\n\n### 六、层叠上下文的创建\n卖了这么多文字，到底层叠上下文是个什么鬼，倒是拿出来瞅瞅啊！\n\n哈哈。如同块状格式化上下文，层叠上下文也基本上是有一些特定的CSS属性创建的。我将其总结为3个流派，也就是做官的3种途径：\n1. 皇亲国戚派：页面根元素天生具有层叠上下文，称之为“根层叠上下文”。\n2. 科考入选派：z-index值为数值的定位元素的传统层叠上下文。\n3. 其他当官途径：其他CSS3属性。\n\n#### 1. 根层叠上下文\n\n指的是页面根元素，也就是滚动条的默认的始作俑者`<html>`元素。这就是为什么，绝对定位元素在`left/top`等值定位的时候，如果没有其他定位元素限制，会相对浏览器窗口定位的原因。\n\n#### 2. 定位元素与传统层叠上下文\n\n对于包含有`position:relative/position:absolute`的定位元素，以及FireFox/IE浏览器（不包括Chrome等webkit内核浏览器）（目前，也就是2016年初是这样）下含有`position:fixed`声明的定位元素，当其`z-index`值不是`auto`的时候，会创建层叠上下文。\n```\n<div style=\"position:relative; z-index:auto;\">\n    <img src=\"mm1.jpg\" style=\"position:absolute; z-index:2;\">    <-- 横妹子 -->\n</div>\n<div style=\"position:relative; z-index:auto;\">\n    <img src=\"mm2.jpg\" style=\"position:relative; z-index:1;\">    <-- 竖妹子 -->\n</div>\n```\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/cd1fe1668945295e.png)\n\n大家会发现，竖着的妹子(mm2)被横着的妹子(mm1)给覆盖了。\n\n下面，我们对父级简单调整下，把z-index:auto改成层叠水平一致的z-index:0, 代码如下：\n\n```\n<div style=\"position:relative; z-index:0;\">\n    <img src=\"mm1.jpg\" style=\"position:absolute; z-index:2;\">    <-- 横妹子 -->\n</div>\n<div style=\"position:relative; z-index:0;\">\n    <img src=\"mm2.jpg\" style=\"position:relative; z-index:1;\">    <-- 竖妹子 -->\n</div>\n```\n![alt 层叠顺序规则](https://s3.bmp.ovh/imgs/2021/11/212b18d02d746cc4.png)\n\n\n为什么小小的改变会有想法的结果呢？\n\n差别就在于，`z-index:0`所在的`<div>`元素是层叠上下文元素，而`z-index:auto`所在的`<div>`元素是一个普通的元素，于是，里面的两个`<img>`妹子的层叠比较就不受父级的影响，两者直接套用层叠黄金准则，这里，两者有着明显不一的`z-index`值，因此，遵循<b>“谁大谁上”</b>的准则，于是，`z-index`为`2`的那个横妹子，就趴在了`z-index`为`1`的竖妹子身上。\n\n而`z-index`一旦变成数值，哪怕是`0`，都会创建一个层叠上下文。此时，层叠规则就发生了变化。层叠上下文的特性里面最后一条——自成体系。两个`<img>`妹子的层叠顺序比较变成了优先比较其父级层叠上下文元素的层叠顺序。这里，由于两者都是`z-index:0`，层叠顺序这一块两者一样大，此时，遵循层叠黄金准则的另外一个准则<b>“后来居上”</b>，根据在DOM流中的位置决定谁在上面，于是，位于后面的竖着的妹子就自然而然趴在了横着的妹子身上。对，没错，`<img>`元素上的`z-index`打酱油了！\n\n有时候，我们在网页重构的时候，会发现，`z-index`嵌套错乱，看看是不是受父级的层叠上下文元素干扰了。然后，可能没多大意义了，但我还是提一下，算是祭奠下，IE6/IE7浏览器有个bug，就是`z-index:auto`的定位元素也会创建层叠上下文。这就是为什么在过去，IE6/IE7的`z-index`会搞死人的原因。\n\n然后，我再提一下`position:fixed`, 在过去，`position:fixed`和`relative/absolute`在层叠上下文这一块是一路货色，都是需要`z-index`为数值才行。但是，不知道什么时候起，Chrome等webkit内核浏览器，`position:fixed`元素天然层叠上下文元素，无需`z-index`为数值。根据我的测试，目前，IE以及FireFox仍是老套路。\n\n#### 3. CSS3与新时代的层叠上下文\nCSS3的出现除了带来了新属性，同时还对过去的很多规则发出了挑战。例如，CSS3 `transform`对`overflow`隐藏对`position:fixed`定位的影响等。而这里，层叠上下文这一块的影响要更加广泛与显著。\n\n如下：\n1. `z-index`值不为`auto`的`flex`项(父元素`display:flex|inline-flex`).\n2. 元素的`opacity`值不是`1`.\n3. 元素的`transform`值不是`none`.\n4. 元素`mix-blend-mode`值不是`normal`.\n5. 元素的`filter`值不是`none`.\n6. 元素的`isolation`值是`isolate`.\n7. `will-change`指定的属性值为上面任意一个。\n8. 元素的`-webkit-overflow-scrolling`设为`touch`.\n\n### 七、结束语\n\n只要元素发生层叠，要解释其表现，基本上就本文的这些内容了。\n\n我发现很多重构小伙伴都有`z-index`滥用，或者使用不规范的问题。我觉得最主要的原因还是对理解层叠上下文以及层叠顺序这些概念都不了解。例如，只要使用了定位元素，尤其`absolute`绝对定位，都离不开设置一个`z-index`值；或者只要元素被其他元素覆盖了，例如变成定位元素或者增加`z-index`值升级。页面一复杂，必然搞得乱七八糟。\n\n实际上，在我看来，觉得多数常见，`z-index`根本就没有出现的必要。知道了内联元素的层叠水平比块状元素高，于是，某条线你想覆盖上去的时候，需要设置`position:relative`吗？不需要，`inline-block`化就可以。因为IE6/IE7 `position:relative`会创建层叠上下文，很烦的。\n\nOK，本文已经够长了，就不多啰嗦了。\n\n行为匆忙，出错在所难免，欢迎大力指正。也欢迎各种形式的交流，或者指出文中概念性的错误。\n\n感谢阅读！\n\n[参考地址](https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/)","slug":"stacking-context","published":1,"updated":"2021-11-26T08:33:46.428Z","_id":"ckwg295sc0000u0uy7am8hv3a","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><h3 id=\"一、什么是层叠上下文\"><a href=\"#一、什么是层叠上下文\" class=\"headerlink\" title=\"一、什么是层叠上下文\"></a>一、什么是层叠上下文</h3><p>层叠上下文，英文称作”stacking context”. 是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。</p>\n<p>这里出现了一个名词-z轴，指的是什么呢？</p>\n<p>表示的是用户与屏幕的这条看不见的垂直线。</p>\n<p>层叠上下文是一个概念，跟「块状格式化上下文(BFC)」类似。然而，概念这个东西是比较虚比较抽象的，要想轻松理解，我们需要将其具象化。</p>\n<p>怎么个具象化法呢？</p>\n<p>你可以把「层叠上下文」理解为当官：网页中有很多很多的元素，我们可以看成是真实世界的芸芸众生。真实世界里，我们大多数人是普通老百姓们，还有一部分人是做官的官员。OK，这里的“官员”就可以理解为网页中的层叠上下文元素。</p>\n<p>换句话说，页面中的元素有了层叠上下文，就好比我们普通老百姓当了官，一旦当了官，相比普通老百姓而言，离皇帝更近了，对不对，就等同于网页中元素级别更高，离我们用户更近了。</p>\n<h3 id=\"二、什么是层叠水平\"><a href=\"#二、什么是层叠水平\" class=\"headerlink\" title=\"二、什么是层叠水平\"></a>二、什么是层叠水平</h3><p>再来说说层叠水平。“层叠水平”英文称作”stacking level”，决定了同一个层叠上下文中元素在z轴上的显示顺序。level这个词很容易让我们联想到我们真正世界中的三六九等、论资排辈。真实世界中，每个人都是独立的个体，包括同卵双胞胎，有差异就有区分。例如，双胞胎虽然长得像Ctrl+C/Ctrl+V得到的，但实际上，出生时间还是有先后顺序的，先出生的那个就大，大哥或大姐。网页中的元素也是如此，页面中的每个元素都是独立的个体，他们一定是会有一个类似的排名排序的情况存在。而这个排名排序、论资排辈就是我们这里所说的“层叠水平”。层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类；对于普通元素，这个嘛……你自己随意理解。</p>\n<p>于是，显而易见，所有的元素都有层叠水平，包括层叠上下文元素，层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类。然后，对于普通元素的层叠水平，我们的探讨仅仅局限在当前层叠上下文元素中。为什么呢？因为否则没有意义。</p>\n<p>这么理解吧~ 上面提过元素具有层叠上下文好比当官，大家都知道的，这当官的家里都有丫鬟啊保镖啊管家啊什么的。所谓打狗看主人，A官员家里的管家和B官员家里的管家做PK实际上是没有意义的，因为他们牛不牛逼完全由他们的主子决定的。一人得道鸡犬升天，你说这和珅家里的管家和七侠镇娄知县县令家里的管家有可比性吗？李总理的秘书是不是分分钟灭了你村支部书记的秘书（如果有）。</p>\n<p>翻译成术语就是：普通元素的层叠水平优先由层叠上下文决定，因此，层叠水平的比较只有在当前层叠上下文元素中才有意义。</p>\n<p>需要注意的是，诸位千万不要把层叠水平和CSS的z-index属性混为一谈。没错，某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的孩子元素；而层叠水平所有的元素都存在。</p>\n<h3 id=\"三、什么是层叠顺序\"><a href=\"#三、什么是层叠顺序\" class=\"headerlink\" title=\"三、什么是层叠顺序\"></a>三、什么是层叠顺序</h3><p>再来说说层叠顺序。“层叠顺序”英文称作”stacking order”. 表示元素发生层叠时候有着特定的垂直显示顺序，注意，这里跟上面两个不一样，上面的层叠上下文和层叠水平是概念，而这里的层叠顺序是规则。</p>\n<p>在CSS2.1的年代，在CSS3还没有出现的时候（注意这里的前提），层叠顺序规则遵循下面这张图：<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/bdb573ccb36a3195.png\" alt=\"alt 层叠顺序规则\"><br>有人可能有见过类似图，那个图是很多很多年前老外绘制的，英文内容。而是更关键的是国内估计没有同行进行过验证与实践，实际上很多关键信息缺失。</p>\n<p>缺失的关键信息包括：</p>\n<ol>\n<li>第一项 位于最低水平的 <kbd>border/background</kbd>指的是层叠上下文元素的边框和背景色。每一个层叠顺序规则适用于一个完整的层叠上下文元素。</li>\n<li>原图没有呈现inline-block的层叠顺序，实际上，inline-block和inline水平元素是同等level级别。</li>\n<li>z-index:0实际上和z-index:auto单纯从层叠水平上看，是可以看成是一样的。注意这里的措辞——“单纯从层叠水平上看”，实际上，两者在层叠上下文领域有着根本性的差异。<br>下面我要向大家发问了，大家有没有想过，为什么内联元素的层叠顺序要比浮动元素和块状元素都高？</li>\n</ol>\n<p>为什么呢？我明明感觉浮动元素和块状元素要更屌一点啊。</p>\n<p>嘿嘿嘿，我就不卖关子了，直接看下图的标注说明：<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/c2e53ebce4211353.png\" alt=\"alt 层叠顺序规则\"></p>\n<p>诸如border/background一般为装饰属性，而浮动和块状元素一般用作布局，而内联元素都是内容。网页中最重要的是什么？当然是内容了哈，对不对！</p>\n<p>因此，一定要让内容的层叠顺序相当高，当发生层叠是很好，重要的文字啊图片内容可以优先暴露在屏幕上。</p>\n<h3 id=\"四、务必牢记的层叠准则\"><a href=\"#四、务必牢记的层叠准则\" class=\"headerlink\" title=\"四、务必牢记的层叠准则\"></a>四、务必牢记的层叠准则</h3><p>下面这两个是层叠领域的黄金准则。当元素发生层叠的时候，其覆盖关系遵循下面2个准则：</p>\n<ol>\n<li><b>谁大谁上：</b> 当具有明显的层叠水平标示的时候，如识别的z-indx值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。通俗讲就是官大的压死官小的。</li>\n<li><b>后来居上：</b>当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li>\n</ol>\n<p>在CSS和HTML领域，只要元素发生了重叠，都离不开上面这两个黄金准则。因为后面会有多个实例说明，这里就到此为止。</p>\n<h3 id=\"五、层叠上下文的特性\"><a href=\"#五、层叠上下文的特性\" class=\"headerlink\" title=\"五、层叠上下文的特性\"></a>五、层叠上下文的特性</h3><p>层叠上下文元素有如下特性：</p>\n<ul>\n<li>层叠上下文的层叠水平要比普通元素高</li>\n<li>层叠上下文可以阻断元素的混合模式</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</li>\n</ul>\n<h3 id=\"六、层叠上下文的创建\"><a href=\"#六、层叠上下文的创建\" class=\"headerlink\" title=\"六、层叠上下文的创建\"></a>六、层叠上下文的创建</h3><p>卖了这么多文字，到底层叠上下文是个什么鬼，倒是拿出来瞅瞅啊！</p>\n<p>哈哈。如同块状格式化上下文，层叠上下文也基本上是有一些特定的CSS属性创建的。我将其总结为3个流派，也就是做官的3种途径：</p>\n<ol>\n<li>皇亲国戚派：页面根元素天生具有层叠上下文，称之为“根层叠上下文”。</li>\n<li>科考入选派：z-index值为数值的定位元素的传统层叠上下文。</li>\n<li>其他当官途径：其他CSS3属性。</li>\n</ol>\n<h4 id=\"1-根层叠上下文\"><a href=\"#1-根层叠上下文\" class=\"headerlink\" title=\"1. 根层叠上下文\"></a>1. 根层叠上下文</h4><p>指的是页面根元素，也就是滚动条的默认的始作俑者<code>&lt;html&gt;</code>元素。这就是为什么，绝对定位元素在<code>left/top</code>等值定位的时候，如果没有其他定位元素限制，会相对浏览器窗口定位的原因。</p>\n<h4 id=\"2-定位元素与传统层叠上下文\"><a href=\"#2-定位元素与传统层叠上下文\" class=\"headerlink\" title=\"2. 定位元素与传统层叠上下文\"></a>2. 定位元素与传统层叠上下文</h4><p>对于包含有<code>position:relative/position:absolute</code>的定位元素，以及FireFox/IE浏览器（不包括Chrome等webkit内核浏览器）（目前，也就是2016年初是这样）下含有<code>position:fixed</code>声明的定位元素，当其<code>z-index</code>值不是<code>auto</code>的时候，会创建层叠上下文。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:auto;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm1.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:absolute; z-index:2;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 横妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:auto;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm2.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:1;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 竖妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/11/cd1fe1668945295e.png\" alt=\"alt 层叠顺序规则\"></p>\n<p>大家会发现，竖着的妹子(mm2)被横着的妹子(mm1)给覆盖了。</p>\n<p>下面，我们对父级简单调整下，把z-index:auto改成层叠水平一致的z-index:0, 代码如下：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:0;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm1.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:absolute; z-index:2;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 横妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:0;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm2.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:1;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 竖妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/11/212b18d02d746cc4.png\" alt=\"alt 层叠顺序规则\"></p>\n<p>为什么小小的改变会有想法的结果呢？</p>\n<p>差别就在于，<code>z-index:0</code>所在的<code>&lt;div&gt;</code>元素是层叠上下文元素，而<code>z-index:auto</code>所在的<code>&lt;div&gt;</code>元素是一个普通的元素，于是，里面的两个<code>&lt;img&gt;</code>妹子的层叠比较就不受父级的影响，两者直接套用层叠黄金准则，这里，两者有着明显不一的<code>z-index</code>值，因此，遵循<b>“谁大谁上”</b>的准则，于是，<code>z-index</code>为<code>2</code>的那个横妹子，就趴在了<code>z-index</code>为<code>1</code>的竖妹子身上。</p>\n<p>而<code>z-index</code>一旦变成数值，哪怕是<code>0</code>，都会创建一个层叠上下文。此时，层叠规则就发生了变化。层叠上下文的特性里面最后一条——自成体系。两个<code>&lt;img&gt;</code>妹子的层叠顺序比较变成了优先比较其父级层叠上下文元素的层叠顺序。这里，由于两者都是<code>z-index:0</code>，层叠顺序这一块两者一样大，此时，遵循层叠黄金准则的另外一个准则<b>“后来居上”</b>，根据在DOM流中的位置决定谁在上面，于是，位于后面的竖着的妹子就自然而然趴在了横着的妹子身上。对，没错，<code>&lt;img&gt;</code>元素上的<code>z-index</code>打酱油了！</p>\n<p>有时候，我们在网页重构的时候，会发现，<code>z-index</code>嵌套错乱，看看是不是受父级的层叠上下文元素干扰了。然后，可能没多大意义了，但我还是提一下，算是祭奠下，IE6/IE7浏览器有个bug，就是<code>z-index:auto</code>的定位元素也会创建层叠上下文。这就是为什么在过去，IE6/IE7的<code>z-index</code>会搞死人的原因。</p>\n<p>然后，我再提一下<code>position:fixed</code>, 在过去，<code>position:fixed</code>和<code>relative/absolute</code>在层叠上下文这一块是一路货色，都是需要<code>z-index</code>为数值才行。但是，不知道什么时候起，Chrome等webkit内核浏览器，<code>position:fixed</code>元素天然层叠上下文元素，无需<code>z-index</code>为数值。根据我的测试，目前，IE以及FireFox仍是老套路。</p>\n<h4 id=\"3-CSS3与新时代的层叠上下文\"><a href=\"#3-CSS3与新时代的层叠上下文\" class=\"headerlink\" title=\"3. CSS3与新时代的层叠上下文\"></a>3. CSS3与新时代的层叠上下文</h4><p>CSS3的出现除了带来了新属性，同时还对过去的很多规则发出了挑战。例如，CSS3 <code>transform</code>对<code>overflow</code>隐藏对<code>position:fixed</code>定位的影响等。而这里，层叠上下文这一块的影响要更加广泛与显著。</p>\n<p>如下：</p>\n<ol>\n<li><code>z-index</code>值不为<code>auto</code>的<code>flex</code>项(父元素<code>display:flex|inline-flex</code>).</li>\n<li>元素的<code>opacity</code>值不是<code>1</code>.</li>\n<li>元素的<code>transform</code>值不是<code>none</code>.</li>\n<li>元素<code>mix-blend-mode</code>值不是<code>normal</code>.</li>\n<li>元素的<code>filter</code>值不是<code>none</code>.</li>\n<li>元素的<code>isolation</code>值是<code>isolate</code>.</li>\n<li><code>will-change</code>指定的属性值为上面任意一个。</li>\n<li>元素的<code>-webkit-overflow-scrolling</code>设为<code>touch</code>.</li>\n</ol>\n<h3 id=\"七、结束语\"><a href=\"#七、结束语\" class=\"headerlink\" title=\"七、结束语\"></a>七、结束语</h3><p>只要元素发生层叠，要解释其表现，基本上就本文的这些内容了。</p>\n<p>我发现很多重构小伙伴都有<code>z-index</code>滥用，或者使用不规范的问题。我觉得最主要的原因还是对理解层叠上下文以及层叠顺序这些概念都不了解。例如，只要使用了定位元素，尤其<code>absolute</code>绝对定位，都离不开设置一个<code>z-index</code>值；或者只要元素被其他元素覆盖了，例如变成定位元素或者增加<code>z-index</code>值升级。页面一复杂，必然搞得乱七八糟。</p>\n<p>实际上，在我看来，觉得多数常见，<code>z-index</code>根本就没有出现的必要。知道了内联元素的层叠水平比块状元素高，于是，某条线你想覆盖上去的时候，需要设置<code>position:relative</code>吗？不需要，<code>inline-block</code>化就可以。因为IE6/IE7 <code>position:relative</code>会创建层叠上下文，很烦的。</p>\n<p>OK，本文已经够长了，就不多啰嗦了。</p>\n<p>行为匆忙，出错在所难免，欢迎大力指正。也欢迎各种形式的交流，或者指出文中概念性的错误。</p>\n<p>感谢阅读！</p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\">参考地址</a></p>\n","site":{"data":{}},"wordcount":5045,"excerpt":"","more":"<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><h3 id=\"一、什么是层叠上下文\"><a href=\"#一、什么是层叠上下文\" class=\"headerlink\" title=\"一、什么是层叠上下文\"></a>一、什么是层叠上下文</h3><p>层叠上下文，英文称作”stacking context”. 是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。</p>\n<p>这里出现了一个名词-z轴，指的是什么呢？</p>\n<p>表示的是用户与屏幕的这条看不见的垂直线。</p>\n<p>层叠上下文是一个概念，跟「块状格式化上下文(BFC)」类似。然而，概念这个东西是比较虚比较抽象的，要想轻松理解，我们需要将其具象化。</p>\n<p>怎么个具象化法呢？</p>\n<p>你可以把「层叠上下文」理解为当官：网页中有很多很多的元素，我们可以看成是真实世界的芸芸众生。真实世界里，我们大多数人是普通老百姓们，还有一部分人是做官的官员。OK，这里的“官员”就可以理解为网页中的层叠上下文元素。</p>\n<p>换句话说，页面中的元素有了层叠上下文，就好比我们普通老百姓当了官，一旦当了官，相比普通老百姓而言，离皇帝更近了，对不对，就等同于网页中元素级别更高，离我们用户更近了。</p>\n<h3 id=\"二、什么是层叠水平\"><a href=\"#二、什么是层叠水平\" class=\"headerlink\" title=\"二、什么是层叠水平\"></a>二、什么是层叠水平</h3><p>再来说说层叠水平。“层叠水平”英文称作”stacking level”，决定了同一个层叠上下文中元素在z轴上的显示顺序。level这个词很容易让我们联想到我们真正世界中的三六九等、论资排辈。真实世界中，每个人都是独立的个体，包括同卵双胞胎，有差异就有区分。例如，双胞胎虽然长得像Ctrl+C/Ctrl+V得到的，但实际上，出生时间还是有先后顺序的，先出生的那个就大，大哥或大姐。网页中的元素也是如此，页面中的每个元素都是独立的个体，他们一定是会有一个类似的排名排序的情况存在。而这个排名排序、论资排辈就是我们这里所说的“层叠水平”。层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类；对于普通元素，这个嘛……你自己随意理解。</p>\n<p>于是，显而易见，所有的元素都有层叠水平，包括层叠上下文元素，层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类。然后，对于普通元素的层叠水平，我们的探讨仅仅局限在当前层叠上下文元素中。为什么呢？因为否则没有意义。</p>\n<p>这么理解吧~ 上面提过元素具有层叠上下文好比当官，大家都知道的，这当官的家里都有丫鬟啊保镖啊管家啊什么的。所谓打狗看主人，A官员家里的管家和B官员家里的管家做PK实际上是没有意义的，因为他们牛不牛逼完全由他们的主子决定的。一人得道鸡犬升天，你说这和珅家里的管家和七侠镇娄知县县令家里的管家有可比性吗？李总理的秘书是不是分分钟灭了你村支部书记的秘书（如果有）。</p>\n<p>翻译成术语就是：普通元素的层叠水平优先由层叠上下文决定，因此，层叠水平的比较只有在当前层叠上下文元素中才有意义。</p>\n<p>需要注意的是，诸位千万不要把层叠水平和CSS的z-index属性混为一谈。没错，某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的孩子元素；而层叠水平所有的元素都存在。</p>\n<h3 id=\"三、什么是层叠顺序\"><a href=\"#三、什么是层叠顺序\" class=\"headerlink\" title=\"三、什么是层叠顺序\"></a>三、什么是层叠顺序</h3><p>再来说说层叠顺序。“层叠顺序”英文称作”stacking order”. 表示元素发生层叠时候有着特定的垂直显示顺序，注意，这里跟上面两个不一样，上面的层叠上下文和层叠水平是概念，而这里的层叠顺序是规则。</p>\n<p>在CSS2.1的年代，在CSS3还没有出现的时候（注意这里的前提），层叠顺序规则遵循下面这张图：<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/bdb573ccb36a3195.png\" alt=\"alt 层叠顺序规则\"><br>有人可能有见过类似图，那个图是很多很多年前老外绘制的，英文内容。而是更关键的是国内估计没有同行进行过验证与实践，实际上很多关键信息缺失。</p>\n<p>缺失的关键信息包括：</p>\n<ol>\n<li>第一项 位于最低水平的 <kbd>border/background</kbd>指的是层叠上下文元素的边框和背景色。每一个层叠顺序规则适用于一个完整的层叠上下文元素。</li>\n<li>原图没有呈现inline-block的层叠顺序，实际上，inline-block和inline水平元素是同等level级别。</li>\n<li>z-index:0实际上和z-index:auto单纯从层叠水平上看，是可以看成是一样的。注意这里的措辞——“单纯从层叠水平上看”，实际上，两者在层叠上下文领域有着根本性的差异。<br>下面我要向大家发问了，大家有没有想过，为什么内联元素的层叠顺序要比浮动元素和块状元素都高？</li>\n</ol>\n<p>为什么呢？我明明感觉浮动元素和块状元素要更屌一点啊。</p>\n<p>嘿嘿嘿，我就不卖关子了，直接看下图的标注说明：<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/c2e53ebce4211353.png\" alt=\"alt 层叠顺序规则\"></p>\n<p>诸如border/background一般为装饰属性，而浮动和块状元素一般用作布局，而内联元素都是内容。网页中最重要的是什么？当然是内容了哈，对不对！</p>\n<p>因此，一定要让内容的层叠顺序相当高，当发生层叠是很好，重要的文字啊图片内容可以优先暴露在屏幕上。</p>\n<h3 id=\"四、务必牢记的层叠准则\"><a href=\"#四、务必牢记的层叠准则\" class=\"headerlink\" title=\"四、务必牢记的层叠准则\"></a>四、务必牢记的层叠准则</h3><p>下面这两个是层叠领域的黄金准则。当元素发生层叠的时候，其覆盖关系遵循下面2个准则：</p>\n<ol>\n<li><b>谁大谁上：</b> 当具有明显的层叠水平标示的时候，如识别的z-indx值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。通俗讲就是官大的压死官小的。</li>\n<li><b>后来居上：</b>当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li>\n</ol>\n<p>在CSS和HTML领域，只要元素发生了重叠，都离不开上面这两个黄金准则。因为后面会有多个实例说明，这里就到此为止。</p>\n<h3 id=\"五、层叠上下文的特性\"><a href=\"#五、层叠上下文的特性\" class=\"headerlink\" title=\"五、层叠上下文的特性\"></a>五、层叠上下文的特性</h3><p>层叠上下文元素有如下特性：</p>\n<ul>\n<li>层叠上下文的层叠水平要比普通元素高</li>\n<li>层叠上下文可以阻断元素的混合模式</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</li>\n</ul>\n<h3 id=\"六、层叠上下文的创建\"><a href=\"#六、层叠上下文的创建\" class=\"headerlink\" title=\"六、层叠上下文的创建\"></a>六、层叠上下文的创建</h3><p>卖了这么多文字，到底层叠上下文是个什么鬼，倒是拿出来瞅瞅啊！</p>\n<p>哈哈。如同块状格式化上下文，层叠上下文也基本上是有一些特定的CSS属性创建的。我将其总结为3个流派，也就是做官的3种途径：</p>\n<ol>\n<li>皇亲国戚派：页面根元素天生具有层叠上下文，称之为“根层叠上下文”。</li>\n<li>科考入选派：z-index值为数值的定位元素的传统层叠上下文。</li>\n<li>其他当官途径：其他CSS3属性。</li>\n</ol>\n<h4 id=\"1-根层叠上下文\"><a href=\"#1-根层叠上下文\" class=\"headerlink\" title=\"1. 根层叠上下文\"></a>1. 根层叠上下文</h4><p>指的是页面根元素，也就是滚动条的默认的始作俑者<code>&lt;html&gt;</code>元素。这就是为什么，绝对定位元素在<code>left/top</code>等值定位的时候，如果没有其他定位元素限制，会相对浏览器窗口定位的原因。</p>\n<h4 id=\"2-定位元素与传统层叠上下文\"><a href=\"#2-定位元素与传统层叠上下文\" class=\"headerlink\" title=\"2. 定位元素与传统层叠上下文\"></a>2. 定位元素与传统层叠上下文</h4><p>对于包含有<code>position:relative/position:absolute</code>的定位元素，以及FireFox/IE浏览器（不包括Chrome等webkit内核浏览器）（目前，也就是2016年初是这样）下含有<code>position:fixed</code>声明的定位元素，当其<code>z-index</code>值不是<code>auto</code>的时候，会创建层叠上下文。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:auto;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm1.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:absolute; z-index:2;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 横妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:auto;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm2.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:1;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 竖妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/11/cd1fe1668945295e.png\" alt=\"alt 层叠顺序规则\"></p>\n<p>大家会发现，竖着的妹子(mm2)被横着的妹子(mm1)给覆盖了。</p>\n<p>下面，我们对父级简单调整下，把z-index:auto改成层叠水平一致的z-index:0, 代码如下：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:0;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm1.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:absolute; z-index:2;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 横妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br>&lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:0;&quot;</span>&gt;<br>    &lt;img src=<span class=\"hljs-string\">&quot;mm2.jpg&quot;</span> style=<span class=\"hljs-string\">&quot;position:relative; z-index:1;&quot;</span>&gt;    &lt;<span class=\"hljs-comment\">-- 竖妹子 --&gt;</span><br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/11/212b18d02d746cc4.png\" alt=\"alt 层叠顺序规则\"></p>\n<p>为什么小小的改变会有想法的结果呢？</p>\n<p>差别就在于，<code>z-index:0</code>所在的<code>&lt;div&gt;</code>元素是层叠上下文元素，而<code>z-index:auto</code>所在的<code>&lt;div&gt;</code>元素是一个普通的元素，于是，里面的两个<code>&lt;img&gt;</code>妹子的层叠比较就不受父级的影响，两者直接套用层叠黄金准则，这里，两者有着明显不一的<code>z-index</code>值，因此，遵循<b>“谁大谁上”</b>的准则，于是，<code>z-index</code>为<code>2</code>的那个横妹子，就趴在了<code>z-index</code>为<code>1</code>的竖妹子身上。</p>\n<p>而<code>z-index</code>一旦变成数值，哪怕是<code>0</code>，都会创建一个层叠上下文。此时，层叠规则就发生了变化。层叠上下文的特性里面最后一条——自成体系。两个<code>&lt;img&gt;</code>妹子的层叠顺序比较变成了优先比较其父级层叠上下文元素的层叠顺序。这里，由于两者都是<code>z-index:0</code>，层叠顺序这一块两者一样大，此时，遵循层叠黄金准则的另外一个准则<b>“后来居上”</b>，根据在DOM流中的位置决定谁在上面，于是，位于后面的竖着的妹子就自然而然趴在了横着的妹子身上。对，没错，<code>&lt;img&gt;</code>元素上的<code>z-index</code>打酱油了！</p>\n<p>有时候，我们在网页重构的时候，会发现，<code>z-index</code>嵌套错乱，看看是不是受父级的层叠上下文元素干扰了。然后，可能没多大意义了，但我还是提一下，算是祭奠下，IE6/IE7浏览器有个bug，就是<code>z-index:auto</code>的定位元素也会创建层叠上下文。这就是为什么在过去，IE6/IE7的<code>z-index</code>会搞死人的原因。</p>\n<p>然后，我再提一下<code>position:fixed</code>, 在过去，<code>position:fixed</code>和<code>relative/absolute</code>在层叠上下文这一块是一路货色，都是需要<code>z-index</code>为数值才行。但是，不知道什么时候起，Chrome等webkit内核浏览器，<code>position:fixed</code>元素天然层叠上下文元素，无需<code>z-index</code>为数值。根据我的测试，目前，IE以及FireFox仍是老套路。</p>\n<h4 id=\"3-CSS3与新时代的层叠上下文\"><a href=\"#3-CSS3与新时代的层叠上下文\" class=\"headerlink\" title=\"3. CSS3与新时代的层叠上下文\"></a>3. CSS3与新时代的层叠上下文</h4><p>CSS3的出现除了带来了新属性，同时还对过去的很多规则发出了挑战。例如，CSS3 <code>transform</code>对<code>overflow</code>隐藏对<code>position:fixed</code>定位的影响等。而这里，层叠上下文这一块的影响要更加广泛与显著。</p>\n<p>如下：</p>\n<ol>\n<li><code>z-index</code>值不为<code>auto</code>的<code>flex</code>项(父元素<code>display:flex|inline-flex</code>).</li>\n<li>元素的<code>opacity</code>值不是<code>1</code>.</li>\n<li>元素的<code>transform</code>值不是<code>none</code>.</li>\n<li>元素<code>mix-blend-mode</code>值不是<code>normal</code>.</li>\n<li>元素的<code>filter</code>值不是<code>none</code>.</li>\n<li>元素的<code>isolation</code>值是<code>isolate</code>.</li>\n<li><code>will-change</code>指定的属性值为上面任意一个。</li>\n<li>元素的<code>-webkit-overflow-scrolling</code>设为<code>touch</code>.</li>\n</ol>\n<h3 id=\"七、结束语\"><a href=\"#七、结束语\" class=\"headerlink\" title=\"七、结束语\"></a>七、结束语</h3><p>只要元素发生层叠，要解释其表现，基本上就本文的这些内容了。</p>\n<p>我发现很多重构小伙伴都有<code>z-index</code>滥用，或者使用不规范的问题。我觉得最主要的原因还是对理解层叠上下文以及层叠顺序这些概念都不了解。例如，只要使用了定位元素，尤其<code>absolute</code>绝对定位，都离不开设置一个<code>z-index</code>值；或者只要元素被其他元素覆盖了，例如变成定位元素或者增加<code>z-index</code>值升级。页面一复杂，必然搞得乱七八糟。</p>\n<p>实际上，在我看来，觉得多数常见，<code>z-index</code>根本就没有出现的必要。知道了内联元素的层叠水平比块状元素高，于是，某条线你想覆盖上去的时候，需要设置<code>position:relative</code>吗？不需要，<code>inline-block</code>化就可以。因为IE6/IE7 <code>position:relative</code>会创建层叠上下文，很烦的。</p>\n<p>OK，本文已经够长了，就不多啰嗦了。</p>\n<p>行为匆忙，出错在所难免，欢迎大力指正。也欢迎各种形式的交流，或者指出文中概念性的错误。</p>\n<p>感谢阅读！</p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\">参考地址</a></p>\n"},{"title":"HTTP协议相关","date":"2021-11-29T05:58:43.000Z","_content":"\n## HTTP协议相关\n\n### HTTP的全称是什么？\n超文本传输协议，`HyperText Transfer Protocol`，这几个单词可别发走音了。所谓的超文本就是带标记的文本，刚开始的时候是指HTML。现在HTTP协议传输的东西可不只是HTML了，什么表单啊JSON啊XML啊文件啊都可以传输。\n\n### HTTP常用的状态码有哪些？\n400 Bad Request 用于参数验证，少了一个参数或者参数类型错误之类的。\n502 Bad Gateway 后端服务挂掉或者压力过大的时候， Nginx接到的请求无法及时传递给后端的服务进行处理，这个时候就会出现502错误。这个也非常常见，知乎豆瓣网站经常开小差的时候发生的错误就是这个。\n304 Not Modified 极少人知道这个状态码，因为大部分后端开发者的前端Javascript开发经验都严重不足。当你用Chrome打开一个经常访问的网站，看看Network传输的静态资源就可以看到很多304状态码。它表示该资源被浏览器缓存了不需要重新请求服务器。\n401 Unauthorized 权限不足，这个很好理解，就是资源存在但是不让你访问。\n403 Forbidden 资源禁止访问，如果你的IP列为黑名单了，就会发生这种错误。\n其实还有很多状态码，小编也没去好好研究了，因为实在不会在工作中用到。感兴趣的请继续阅读维基百科\n\n### HTTP有哪些Method？\n\nGET 不解释，如果读者不知道，建议别在IT圈混了。\nPOST 一般用于创建或者修改资源，在RESTFUL规范里面POST只用来创建资源，并返回201 Created状态码表示创建成功。不过大多数网站都不遵循严格的RESTFUL规范，POST拿来做修改资源的事也是非常常见的。\nPUT 对应于POST表示创建资源，PUT用于修改资源，PUT的参数必须是对象的全部属性，修改是覆盖式全部修改。\nPATCH 对应于PUT的参数是对象的全部属性，PATCH的参数是部分属性，修改是局部字段修改。\nDELETE 用于删除资源。\nHEAD 不常用，跟GET差不多，区别就是不返回Body内容，只返回HTTP头信息。一般用于获取资源的元信息，比如长度，修改时间等\nOPTIONS 跨域相关，后面再讲。\n\n### HTTP协议格式是怎样的？\n\nHTTP的请求和响应的消息协议是一样的，分为三个部分，起始行、消息头和消息体。这三个部分以CRLF作为分隔符。最后一个消息头有两个CRLF，用来表示消息头部的结束。\n![alt HTTP协议格式](https://s3.bmp.ovh/imgs/2021/11/9edd247283374236.png)\n\nHTTP请求的起始行称为请求行，形如GET /index.html HTTP/1.1\nHTTP响应的起始行称为状态行，形如200 ok\n消息头部有很多键值对组成，多个键值对之间使用CRLF作为分隔符，也可以完全没有键值对。形如Content-Encoding: gzip\n消息体是一个字符串，字符串的长度是由消息头部的Content-Length键指定的。如果没有Content-Length字段说明没有消息体，譬如GET请求就是没有消息体的，POST请求的消息体一般用来放置表单数据。GET请求的响应返回的页面内容也是放在消息体里面的。我们平时调用API返回的JSON内容都是放在消息体里面的。\n\n### 什么是分块传送？\n\n当浏览器向服务器请求一个资源时，这个资源是一个动态资源，服务器无法提前预知资源的大小，这个时候就可以使用分块传输。\n服务器先生成一个thunk，发送这个chunk，再生成一个chunk，再发送一个chunk，直到全部资源传送完成。\n分块传送需要在请求头增加一个特殊的键值对transfer-encoding: thunked，那么消息体的内容便是分块传送的。\n![alt 分块传送](https://s3.bmp.ovh/imgs/2021/11/f08205bdbf44c61d.png)\nchunked传输格式如图所示，由一段一段的分块组合而成，每个块由一个长度行和一个分块体组成，最后一个分块长度为0表示结束。\n\n### 持久连接的机制是怎样的？\n\nHTTP早期版本中每个请求都会发起一个连接，一个网页除了页面的HTML之外还会有很多静态资源以及诸多的API调用，如果每个请求都一个连接，势必网页的一次加载就会和服务器创建多次连接，这是非常浪费服务器资源的，同时也让客户端的访问速度慢了不少。HTTP1.0之后引入了Keep-Alive持久连接，在HTTP1.1版本中成为默认选项。它使得HTTP的一个连接可以连续服务多个请求，有效节省了资源，增加了客户端页面的加载速度。\n持久连接也不宜一直保持，毕竟每个连接都会占用服务器资源，如果打开网页的人太多，那服务器资源也会紧张，所以一般服务器都会配置一个KeepAlive Timeout参数和KeepAlive Requests参数限制单个连接持续时长和最多服务的请求次数。\n如果服务器设置的timeout时长为0，就退化到非持久连接。非持久连接会在响应头部增加一个头信息Connection: Close通知客户端在接受完当前响应后连接需要立即关闭。\n同样浏览器也不会因为服务器将KeepAlive Timeout配置了无限长就不管不问一直持续保持连接。每个浏览器都有它自己的内置限制，具体限制浏览器厂商各有不同。\n\n### 如何理解HTTP协议的无状态性？\n\n所谓HTTP协议的无状态性是指服务器的协议层无需为不同的请求之间建立任何相关关系，它特指的是协议层的无状态性。但是这并不代表建立在HTTP协议之上的应用程序就无法维持状态。应用层可以通过会话Session来跟踪用户请求之间的相关性，服务器会为每个会话对象绑定一个唯一的会话ID，浏览器可以将会话ID记录在本地缓存LocalStorage或者Cookie，在后续的请求都带上这个会话ID，服务器就可以为每个请求找到相应的会话状态。","source":"_posts/aboutHttp.md","raw":"---\ntitle: HTTP协议相关\ndate: 2021-11-29 13:58:43\ntags: 网络协议\n---\n\n## HTTP协议相关\n\n### HTTP的全称是什么？\n超文本传输协议，`HyperText Transfer Protocol`，这几个单词可别发走音了。所谓的超文本就是带标记的文本，刚开始的时候是指HTML。现在HTTP协议传输的东西可不只是HTML了，什么表单啊JSON啊XML啊文件啊都可以传输。\n\n### HTTP常用的状态码有哪些？\n400 Bad Request 用于参数验证，少了一个参数或者参数类型错误之类的。\n502 Bad Gateway 后端服务挂掉或者压力过大的时候， Nginx接到的请求无法及时传递给后端的服务进行处理，这个时候就会出现502错误。这个也非常常见，知乎豆瓣网站经常开小差的时候发生的错误就是这个。\n304 Not Modified 极少人知道这个状态码，因为大部分后端开发者的前端Javascript开发经验都严重不足。当你用Chrome打开一个经常访问的网站，看看Network传输的静态资源就可以看到很多304状态码。它表示该资源被浏览器缓存了不需要重新请求服务器。\n401 Unauthorized 权限不足，这个很好理解，就是资源存在但是不让你访问。\n403 Forbidden 资源禁止访问，如果你的IP列为黑名单了，就会发生这种错误。\n其实还有很多状态码，小编也没去好好研究了，因为实在不会在工作中用到。感兴趣的请继续阅读维基百科\n\n### HTTP有哪些Method？\n\nGET 不解释，如果读者不知道，建议别在IT圈混了。\nPOST 一般用于创建或者修改资源，在RESTFUL规范里面POST只用来创建资源，并返回201 Created状态码表示创建成功。不过大多数网站都不遵循严格的RESTFUL规范，POST拿来做修改资源的事也是非常常见的。\nPUT 对应于POST表示创建资源，PUT用于修改资源，PUT的参数必须是对象的全部属性，修改是覆盖式全部修改。\nPATCH 对应于PUT的参数是对象的全部属性，PATCH的参数是部分属性，修改是局部字段修改。\nDELETE 用于删除资源。\nHEAD 不常用，跟GET差不多，区别就是不返回Body内容，只返回HTTP头信息。一般用于获取资源的元信息，比如长度，修改时间等\nOPTIONS 跨域相关，后面再讲。\n\n### HTTP协议格式是怎样的？\n\nHTTP的请求和响应的消息协议是一样的，分为三个部分，起始行、消息头和消息体。这三个部分以CRLF作为分隔符。最后一个消息头有两个CRLF，用来表示消息头部的结束。\n![alt HTTP协议格式](https://s3.bmp.ovh/imgs/2021/11/9edd247283374236.png)\n\nHTTP请求的起始行称为请求行，形如GET /index.html HTTP/1.1\nHTTP响应的起始行称为状态行，形如200 ok\n消息头部有很多键值对组成，多个键值对之间使用CRLF作为分隔符，也可以完全没有键值对。形如Content-Encoding: gzip\n消息体是一个字符串，字符串的长度是由消息头部的Content-Length键指定的。如果没有Content-Length字段说明没有消息体，譬如GET请求就是没有消息体的，POST请求的消息体一般用来放置表单数据。GET请求的响应返回的页面内容也是放在消息体里面的。我们平时调用API返回的JSON内容都是放在消息体里面的。\n\n### 什么是分块传送？\n\n当浏览器向服务器请求一个资源时，这个资源是一个动态资源，服务器无法提前预知资源的大小，这个时候就可以使用分块传输。\n服务器先生成一个thunk，发送这个chunk，再生成一个chunk，再发送一个chunk，直到全部资源传送完成。\n分块传送需要在请求头增加一个特殊的键值对transfer-encoding: thunked，那么消息体的内容便是分块传送的。\n![alt 分块传送](https://s3.bmp.ovh/imgs/2021/11/f08205bdbf44c61d.png)\nchunked传输格式如图所示，由一段一段的分块组合而成，每个块由一个长度行和一个分块体组成，最后一个分块长度为0表示结束。\n\n### 持久连接的机制是怎样的？\n\nHTTP早期版本中每个请求都会发起一个连接，一个网页除了页面的HTML之外还会有很多静态资源以及诸多的API调用，如果每个请求都一个连接，势必网页的一次加载就会和服务器创建多次连接，这是非常浪费服务器资源的，同时也让客户端的访问速度慢了不少。HTTP1.0之后引入了Keep-Alive持久连接，在HTTP1.1版本中成为默认选项。它使得HTTP的一个连接可以连续服务多个请求，有效节省了资源，增加了客户端页面的加载速度。\n持久连接也不宜一直保持，毕竟每个连接都会占用服务器资源，如果打开网页的人太多，那服务器资源也会紧张，所以一般服务器都会配置一个KeepAlive Timeout参数和KeepAlive Requests参数限制单个连接持续时长和最多服务的请求次数。\n如果服务器设置的timeout时长为0，就退化到非持久连接。非持久连接会在响应头部增加一个头信息Connection: Close通知客户端在接受完当前响应后连接需要立即关闭。\n同样浏览器也不会因为服务器将KeepAlive Timeout配置了无限长就不管不问一直持续保持连接。每个浏览器都有它自己的内置限制，具体限制浏览器厂商各有不同。\n\n### 如何理解HTTP协议的无状态性？\n\n所谓HTTP协议的无状态性是指服务器的协议层无需为不同的请求之间建立任何相关关系，它特指的是协议层的无状态性。但是这并不代表建立在HTTP协议之上的应用程序就无法维持状态。应用层可以通过会话Session来跟踪用户请求之间的相关性，服务器会为每个会话对象绑定一个唯一的会话ID，浏览器可以将会话ID记录在本地缓存LocalStorage或者Cookie，在后续的请求都带上这个会话ID，服务器就可以为每个请求找到相应的会话状态。","slug":"aboutHttp","published":1,"updated":"2021-11-29T06:08:09.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwk9t1d30000eouycbpsekdy","content":"<h2 id=\"HTTP协议相关\"><a href=\"#HTTP协议相关\" class=\"headerlink\" title=\"HTTP协议相关\"></a>HTTP协议相关</h2><h3 id=\"HTTP的全称是什么？\"><a href=\"#HTTP的全称是什么？\" class=\"headerlink\" title=\"HTTP的全称是什么？\"></a>HTTP的全称是什么？</h3><p>超文本传输协议，<code>HyperText Transfer Protocol</code>，这几个单词可别发走音了。所谓的超文本就是带标记的文本，刚开始的时候是指HTML。现在HTTP协议传输的东西可不只是HTML了，什么表单啊JSON啊XML啊文件啊都可以传输。</p>\n<h3 id=\"HTTP常用的状态码有哪些？\"><a href=\"#HTTP常用的状态码有哪些？\" class=\"headerlink\" title=\"HTTP常用的状态码有哪些？\"></a>HTTP常用的状态码有哪些？</h3><p>400 Bad Request 用于参数验证，少了一个参数或者参数类型错误之类的。<br>502 Bad Gateway 后端服务挂掉或者压力过大的时候， Nginx接到的请求无法及时传递给后端的服务进行处理，这个时候就会出现502错误。这个也非常常见，知乎豆瓣网站经常开小差的时候发生的错误就是这个。<br>304 Not Modified 极少人知道这个状态码，因为大部分后端开发者的前端Javascript开发经验都严重不足。当你用Chrome打开一个经常访问的网站，看看Network传输的静态资源就可以看到很多304状态码。它表示该资源被浏览器缓存了不需要重新请求服务器。<br>401 Unauthorized 权限不足，这个很好理解，就是资源存在但是不让你访问。<br>403 Forbidden 资源禁止访问，如果你的IP列为黑名单了，就会发生这种错误。<br>其实还有很多状态码，小编也没去好好研究了，因为实在不会在工作中用到。感兴趣的请继续阅读维基百科</p>\n<h3 id=\"HTTP有哪些Method？\"><a href=\"#HTTP有哪些Method？\" class=\"headerlink\" title=\"HTTP有哪些Method？\"></a>HTTP有哪些Method？</h3><p>GET 不解释，如果读者不知道，建议别在IT圈混了。<br>POST 一般用于创建或者修改资源，在RESTFUL规范里面POST只用来创建资源，并返回201 Created状态码表示创建成功。不过大多数网站都不遵循严格的RESTFUL规范，POST拿来做修改资源的事也是非常常见的。<br>PUT 对应于POST表示创建资源，PUT用于修改资源，PUT的参数必须是对象的全部属性，修改是覆盖式全部修改。<br>PATCH 对应于PUT的参数是对象的全部属性，PATCH的参数是部分属性，修改是局部字段修改。<br>DELETE 用于删除资源。<br>HEAD 不常用，跟GET差不多，区别就是不返回Body内容，只返回HTTP头信息。一般用于获取资源的元信息，比如长度，修改时间等<br>OPTIONS 跨域相关，后面再讲。</p>\n<h3 id=\"HTTP协议格式是怎样的？\"><a href=\"#HTTP协议格式是怎样的？\" class=\"headerlink\" title=\"HTTP协议格式是怎样的？\"></a>HTTP协议格式是怎样的？</h3><p>HTTP的请求和响应的消息协议是一样的，分为三个部分，起始行、消息头和消息体。这三个部分以CRLF作为分隔符。最后一个消息头有两个CRLF，用来表示消息头部的结束。<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/9edd247283374236.png\" alt=\"alt HTTP协议格式\"></p>\n<p>HTTP请求的起始行称为请求行，形如GET /index.html HTTP/1.1<br>HTTP响应的起始行称为状态行，形如200 ok<br>消息头部有很多键值对组成，多个键值对之间使用CRLF作为分隔符，也可以完全没有键值对。形如Content-Encoding: gzip<br>消息体是一个字符串，字符串的长度是由消息头部的Content-Length键指定的。如果没有Content-Length字段说明没有消息体，譬如GET请求就是没有消息体的，POST请求的消息体一般用来放置表单数据。GET请求的响应返回的页面内容也是放在消息体里面的。我们平时调用API返回的JSON内容都是放在消息体里面的。</p>\n<h3 id=\"什么是分块传送？\"><a href=\"#什么是分块传送？\" class=\"headerlink\" title=\"什么是分块传送？\"></a>什么是分块传送？</h3><p>当浏览器向服务器请求一个资源时，这个资源是一个动态资源，服务器无法提前预知资源的大小，这个时候就可以使用分块传输。<br>服务器先生成一个thunk，发送这个chunk，再生成一个chunk，再发送一个chunk，直到全部资源传送完成。<br>分块传送需要在请求头增加一个特殊的键值对transfer-encoding: thunked，那么消息体的内容便是分块传送的。<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/f08205bdbf44c61d.png\" alt=\"alt 分块传送\"><br>chunked传输格式如图所示，由一段一段的分块组合而成，每个块由一个长度行和一个分块体组成，最后一个分块长度为0表示结束。</p>\n<h3 id=\"持久连接的机制是怎样的？\"><a href=\"#持久连接的机制是怎样的？\" class=\"headerlink\" title=\"持久连接的机制是怎样的？\"></a>持久连接的机制是怎样的？</h3><p>HTTP早期版本中每个请求都会发起一个连接，一个网页除了页面的HTML之外还会有很多静态资源以及诸多的API调用，如果每个请求都一个连接，势必网页的一次加载就会和服务器创建多次连接，这是非常浪费服务器资源的，同时也让客户端的访问速度慢了不少。HTTP1.0之后引入了Keep-Alive持久连接，在HTTP1.1版本中成为默认选项。它使得HTTP的一个连接可以连续服务多个请求，有效节省了资源，增加了客户端页面的加载速度。<br>持久连接也不宜一直保持，毕竟每个连接都会占用服务器资源，如果打开网页的人太多，那服务器资源也会紧张，所以一般服务器都会配置一个KeepAlive Timeout参数和KeepAlive Requests参数限制单个连接持续时长和最多服务的请求次数。<br>如果服务器设置的timeout时长为0，就退化到非持久连接。非持久连接会在响应头部增加一个头信息Connection: Close通知客户端在接受完当前响应后连接需要立即关闭。<br>同样浏览器也不会因为服务器将KeepAlive Timeout配置了无限长就不管不问一直持续保持连接。每个浏览器都有它自己的内置限制，具体限制浏览器厂商各有不同。</p>\n<h3 id=\"如何理解HTTP协议的无状态性？\"><a href=\"#如何理解HTTP协议的无状态性？\" class=\"headerlink\" title=\"如何理解HTTP协议的无状态性？\"></a>如何理解HTTP协议的无状态性？</h3><p>所谓HTTP协议的无状态性是指服务器的协议层无需为不同的请求之间建立任何相关关系，它特指的是协议层的无状态性。但是这并不代表建立在HTTP协议之上的应用程序就无法维持状态。应用层可以通过会话Session来跟踪用户请求之间的相关性，服务器会为每个会话对象绑定一个唯一的会话ID，浏览器可以将会话ID记录在本地缓存LocalStorage或者Cookie，在后续的请求都带上这个会话ID，服务器就可以为每个请求找到相应的会话状态。</p>\n","site":{"data":{}},"wordcount":2273,"excerpt":"","more":"<h2 id=\"HTTP协议相关\"><a href=\"#HTTP协议相关\" class=\"headerlink\" title=\"HTTP协议相关\"></a>HTTP协议相关</h2><h3 id=\"HTTP的全称是什么？\"><a href=\"#HTTP的全称是什么？\" class=\"headerlink\" title=\"HTTP的全称是什么？\"></a>HTTP的全称是什么？</h3><p>超文本传输协议，<code>HyperText Transfer Protocol</code>，这几个单词可别发走音了。所谓的超文本就是带标记的文本，刚开始的时候是指HTML。现在HTTP协议传输的东西可不只是HTML了，什么表单啊JSON啊XML啊文件啊都可以传输。</p>\n<h3 id=\"HTTP常用的状态码有哪些？\"><a href=\"#HTTP常用的状态码有哪些？\" class=\"headerlink\" title=\"HTTP常用的状态码有哪些？\"></a>HTTP常用的状态码有哪些？</h3><p>400 Bad Request 用于参数验证，少了一个参数或者参数类型错误之类的。<br>502 Bad Gateway 后端服务挂掉或者压力过大的时候， Nginx接到的请求无法及时传递给后端的服务进行处理，这个时候就会出现502错误。这个也非常常见，知乎豆瓣网站经常开小差的时候发生的错误就是这个。<br>304 Not Modified 极少人知道这个状态码，因为大部分后端开发者的前端Javascript开发经验都严重不足。当你用Chrome打开一个经常访问的网站，看看Network传输的静态资源就可以看到很多304状态码。它表示该资源被浏览器缓存了不需要重新请求服务器。<br>401 Unauthorized 权限不足，这个很好理解，就是资源存在但是不让你访问。<br>403 Forbidden 资源禁止访问，如果你的IP列为黑名单了，就会发生这种错误。<br>其实还有很多状态码，小编也没去好好研究了，因为实在不会在工作中用到。感兴趣的请继续阅读维基百科</p>\n<h3 id=\"HTTP有哪些Method？\"><a href=\"#HTTP有哪些Method？\" class=\"headerlink\" title=\"HTTP有哪些Method？\"></a>HTTP有哪些Method？</h3><p>GET 不解释，如果读者不知道，建议别在IT圈混了。<br>POST 一般用于创建或者修改资源，在RESTFUL规范里面POST只用来创建资源，并返回201 Created状态码表示创建成功。不过大多数网站都不遵循严格的RESTFUL规范，POST拿来做修改资源的事也是非常常见的。<br>PUT 对应于POST表示创建资源，PUT用于修改资源，PUT的参数必须是对象的全部属性，修改是覆盖式全部修改。<br>PATCH 对应于PUT的参数是对象的全部属性，PATCH的参数是部分属性，修改是局部字段修改。<br>DELETE 用于删除资源。<br>HEAD 不常用，跟GET差不多，区别就是不返回Body内容，只返回HTTP头信息。一般用于获取资源的元信息，比如长度，修改时间等<br>OPTIONS 跨域相关，后面再讲。</p>\n<h3 id=\"HTTP协议格式是怎样的？\"><a href=\"#HTTP协议格式是怎样的？\" class=\"headerlink\" title=\"HTTP协议格式是怎样的？\"></a>HTTP协议格式是怎样的？</h3><p>HTTP的请求和响应的消息协议是一样的，分为三个部分，起始行、消息头和消息体。这三个部分以CRLF作为分隔符。最后一个消息头有两个CRLF，用来表示消息头部的结束。<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/9edd247283374236.png\" alt=\"alt HTTP协议格式\"></p>\n<p>HTTP请求的起始行称为请求行，形如GET /index.html HTTP/1.1<br>HTTP响应的起始行称为状态行，形如200 ok<br>消息头部有很多键值对组成，多个键值对之间使用CRLF作为分隔符，也可以完全没有键值对。形如Content-Encoding: gzip<br>消息体是一个字符串，字符串的长度是由消息头部的Content-Length键指定的。如果没有Content-Length字段说明没有消息体，譬如GET请求就是没有消息体的，POST请求的消息体一般用来放置表单数据。GET请求的响应返回的页面内容也是放在消息体里面的。我们平时调用API返回的JSON内容都是放在消息体里面的。</p>\n<h3 id=\"什么是分块传送？\"><a href=\"#什么是分块传送？\" class=\"headerlink\" title=\"什么是分块传送？\"></a>什么是分块传送？</h3><p>当浏览器向服务器请求一个资源时，这个资源是一个动态资源，服务器无法提前预知资源的大小，这个时候就可以使用分块传输。<br>服务器先生成一个thunk，发送这个chunk，再生成一个chunk，再发送一个chunk，直到全部资源传送完成。<br>分块传送需要在请求头增加一个特殊的键值对transfer-encoding: thunked，那么消息体的内容便是分块传送的。<br><img src=\"https://s3.bmp.ovh/imgs/2021/11/f08205bdbf44c61d.png\" alt=\"alt 分块传送\"><br>chunked传输格式如图所示，由一段一段的分块组合而成，每个块由一个长度行和一个分块体组成，最后一个分块长度为0表示结束。</p>\n<h3 id=\"持久连接的机制是怎样的？\"><a href=\"#持久连接的机制是怎样的？\" class=\"headerlink\" title=\"持久连接的机制是怎样的？\"></a>持久连接的机制是怎样的？</h3><p>HTTP早期版本中每个请求都会发起一个连接，一个网页除了页面的HTML之外还会有很多静态资源以及诸多的API调用，如果每个请求都一个连接，势必网页的一次加载就会和服务器创建多次连接，这是非常浪费服务器资源的，同时也让客户端的访问速度慢了不少。HTTP1.0之后引入了Keep-Alive持久连接，在HTTP1.1版本中成为默认选项。它使得HTTP的一个连接可以连续服务多个请求，有效节省了资源，增加了客户端页面的加载速度。<br>持久连接也不宜一直保持，毕竟每个连接都会占用服务器资源，如果打开网页的人太多，那服务器资源也会紧张，所以一般服务器都会配置一个KeepAlive Timeout参数和KeepAlive Requests参数限制单个连接持续时长和最多服务的请求次数。<br>如果服务器设置的timeout时长为0，就退化到非持久连接。非持久连接会在响应头部增加一个头信息Connection: Close通知客户端在接受完当前响应后连接需要立即关闭。<br>同样浏览器也不会因为服务器将KeepAlive Timeout配置了无限长就不管不问一直持续保持连接。每个浏览器都有它自己的内置限制，具体限制浏览器厂商各有不同。</p>\n<h3 id=\"如何理解HTTP协议的无状态性？\"><a href=\"#如何理解HTTP协议的无状态性？\" class=\"headerlink\" title=\"如何理解HTTP协议的无状态性？\"></a>如何理解HTTP协议的无状态性？</h3><p>所谓HTTP协议的无状态性是指服务器的协议层无需为不同的请求之间建立任何相关关系，它特指的是协议层的无状态性。但是这并不代表建立在HTTP协议之上的应用程序就无法维持状态。应用层可以通过会话Session来跟踪用户请求之间的相关性，服务器会为每个会话对象绑定一个唯一的会话ID，浏览器可以将会话ID记录在本地缓存LocalStorage或者Cookie，在后续的请求都带上这个会话ID，服务器就可以为每个请求找到相应的会话状态。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckwg295sc0000u0uy7am8hv3a","tag_id":"ckwg295sg0001u0uy7ekna5o1","_id":"ckwg295sh0002u0uydlu8cxnv"},{"post_id":"ckwk9t1d30000eouycbpsekdy","tag_id":"ckwk9t1d70001eouyd41z3htn","_id":"ckwk9t1d90002eouy3dracox0"}],"Tag":[{"name":"css","_id":"ckwg295sg0001u0uy7ekna5o1"},{"name":"网络协议","_id":"ckwk9t1d70001eouyd41z3htn"}]}}